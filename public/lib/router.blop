
def escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\\/]/g, '\\$&')
}

def createRegExp(str) {
  str = escapeRegExp(str)
  reg = /\:(\w+)/
  names = []
  str1 = str.replace(/\:(\w+)/g, (a, b) => {
    names.push(b)
    return '([\\w\\.\\-\\_]+)'
  })
  return { regexp: `^`str1``, names }
}

class Router {
  def constructor(initial) {
    this.routes = []
    window.addEventListener('popstate', (e) => {
      if e.state == null {
        initial && initial()
      } else {
        matchedRoute = this.routes.find((route) => route.path == e.state.path)
        matchedRoute && matchedRoute.handler(e.state.params)
      }
    })
  }
  def init() {
    this.go(window.location.pathname, true)
  }
  def add(route) {
    { regexp, names } = createRegExp(route.path)
    route.reg = new RegExp(regexp)
    route.params = names
    this.routes.push(route)
  }
  def match(path) {
    m = null
    params = {}
    matchedRoute = this.routes.find((route) => {
      m := path.match(route.reg)
      if m {
        if route.params {
          for index, value in route.params: array {
            params[value] = m[1 + index]
          }
        }
        return true
      }
    })
    if matchedRoute {
      return { route: matchedRoute, params: params }
    }
  }
  def go(path, push=true) {
    m = this.match(path)
    if !m {
      console.log('No route for path 'path'')
      return
    }
    if push {
      history.pushState({
        name: m.route.name,
        path: m.route.path,
        params: m.params
      }, m.route.name, path)
    }
    if m.route.handler {
      m.route.handler(m.params)
    }
  }
}
