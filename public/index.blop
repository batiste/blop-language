
import { TodoListItem, Button } from './TodoListItem.blop'
import { Router } from './router.blop'
import { mount } from 'blop'

router = new Router()
state = {
  todoList: [
    'some task 1',
    'some task 2'
  ],
  dog: null
}

def doggyHanlder(params) {
  console.log('doggyHanlder called with', params)
  state.dog = { breed: params.breed, image: params.image }
  state.choosenDoggy = 'My dog is a 'params.breed''
}

def indexHandler(params) {
  console.log('indexHandler called')
  delete state.choosenDoggy
  delete state.dog
  getNewDog()
}

router.add({ path: '/dogs/:breed/:image', name: 'doggy', handler: doggyHanlder })
router.add({ path: '/', name: 'root', handler: indexHandler })
router.init()

def getNewDog() {
  fetch(`https://dog.ceo/api/breeds/image/random`).then(async (response) => {
    message = (await response.json()).message
    bits = message.split('/')
    state.dog = { url: message, breed: bits[4], image: bits[5] }
  })
}

Input = (attrs) => <input
  type="text"
  value=attrs.value
  on=attrs.on
  style={ fontSize: '16px', padding: '0.5em' } />

Title = (attrs, children) => {
  <h1 style={ fontSize: ''attrs.size || 18'px' }>children</h1>
}

TodoList = (state) => {
  addItem = (e) => {
    e.preventDefault()
    if state.inputValue {
      state.todoList.push(state.inputValue)
      state.inputValue = ''
    }
  }
  editItem = (e, index) => {
    state.editItemIndex = index
  }
  changeItem = (e, index) => {
    state.editItemIndex = false
    state.todoList[index] = e.target.value
  }
  change = (e) => {
    state.inputValue = e.target.value
  }
  remove = (e, index) => {
    state.editItemIndex = false
    state.todoList.splice(index, 1)
  }

  <div>
    <Title size=24>state.choosenDoggy || `Todo list`</Title>
    <form on={ submit: addItem }>
      <Input value=state.inputValue on={ change } />
      <Button on={ click: addItem } size=28>"Add to list"</Button>
    </form>
    <ul style={ maxWidth: '20em' }>
    for index, value in state.todoList {
      <TodoListItem
        removeItem=(e) => remove(e, index)
        editItem=(e) => editItem(e, index)
        changeItem=(e) => changeItem(e, index)
        editMode=state.editItemIndex == index
        value />
    }
    </ul>
    if state.dog {
      dog = state.dog
      <button on={ click: (e) => getNewDog() } type='button'>
        <h3>'Get a new dog'</h3>
      </button>
      <br/>
      <br/>
      <button type='button'
        on={ click: (e) => router.go('/dogs/'dog.breed'/'dog.image'') }>
        <h3>'Click to chose this dog'</h3>
        <img src='https://images.dog.ceo/breeds/'dog.breed'/'dog.image'' style={ maxWidth: '400px' } />
      </button>
    }
  </div>
}

render = () => TodoList(state)

{ umount, refresh } = mount(document.body, render)
