
import { TodoListItem, Button } from './TodoListItem.blop'
import { state, getNewDog } from './state.blop'
import { mount } from 'blop'
import { router } from './routing.blop'

Input = (state) => <input
  type="text"
  value=state.value
  on=state.on
  style={ fontSize: '16px', padding: '0.5em' } />

Title = (state, children) => {
  <h1 style={ fontSize: ''state.size || 18'px' }>children</h1>
}

TodoList = (state) => {
  addItem = (e) => {
    e.preventDefault()
    if state.inputValue {
      state.todoList.push(state.inputValue)
      state.inputValue = ''
    }
  }
  editItem = (e, index) => {
    state.editItemIndex = index
  }
  changeItem = (e, index) => {
    state.editItemIndex = false
    state.todoList[index] = e.target.value
  }
  change = (e) => {
    state.inputValue = e.target.value
  }
  remove = (e, index) => {
    state.editItemIndex = false
    state.todoList.splice(index, 1)
  }

  <div>
    <Title size=24>state.choosenDoggy || `Todo list`</Title>
    <form on={ submit: addItem }>
      <Input value=state.inputValue on={ change } />
      <Button on={ click: addItem } size=28>"Add to list"</Button>
    </form>
    <ul style={ maxWidth: '20em' }>
    for index, value in state.todoList {
      <TodoListItem
        removeItem=(e) => remove(e, index)
        editItem=(e) => editItem(e, index)
        changeItem=(e) => changeItem(e, index)
        editMode=state.editItemIndex == index
        value />
    }
    </ul>
    if state.dog && !state.loading {
      dog = state.dog
        <Button on={ click: getNewDog } type='button'>
          <h3>'Get a new dog'</h3>
        </Button>
        <br/>
        <br/>
        <Button type='button'
          on={ click: (e) => router.go('/dogs/'dog.breed'/'dog.image'') }>
          <h3>'Click to chose this dog'</h3>
          <img
            src='https://images.dog.ceo/breeds/'dog.breed'/'dog.image''
            style={ maxWidth: '400px' } />
        </Button>
      } else {
        <h3>'Loading...'</h3>
      }
  </div>
}

render = () => TodoList(state)

{ umount, refresh } = mount(document.body, render)
