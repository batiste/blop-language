
def escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\\/]/g, '\\$&')
}

def replace(str) {
  str1 = str.replace(/\:(\w+)/g, '(?<$1>[\\w\\.\\-\\_]+)')
  return `^`str1``
}

class Router {
  def constructor(initial) {
    this.routes = []
    window.addEventListener('popstate', (e) => {
      if e.state == null {
        initial && initial()
      } else {
        matchedRoute = this.routes.find(route => route.path == e.state.path)
        matchedRoute && matchedRoute.handler(e.state.params)
      }
    })
  }
  def init() {
    this.go(window.location.pathname, false)
  }
  def add(route) {
    route.reg = new RegExp(replace(escapeRegExp(route.path)))
    this.routes.push(route)
  }
  def match(path) {
    m = null
    matchedRoute = this.routes.find((route) => {
      m := path.match(route.reg)
      return !!m
    })
    if matchedRoute {
      return { route: matchedRoute, params: m.groups }
    }
  }
  def go(path, push=true) {
    m = this.match(path)
    if !m {
      console.log('No route for path 'path'')
      return
    }
    if push {
      history.pushState({
        name: m.route.name,
        path: m.route.path,
        params: m.params
      }, m.route.name, path)
    }
    if m.route.handler {
      m.route.handler(m.params)
    }
  }
}
