
def render(text) {
  <h1>text</h1>
}

def level1() {
  i = 0
  <div>
    def add() {
      i := i + 1
      <span>i</span>
    }
    add()
    add()
    add()
  </div>
}

// should produce no warning
def testConditions() {
  if true {
    if false {
      <div>1</div>
    } elseif 1 {
      <div>2</div>
    } else {
      <div>3</div>
    }
  } elseif 1 {
    <div>4</div>
  } else {
    <div>5</div>
  }
}


def loop1(array) {
  <div>
    for item in array: array {
      = item
    }
  </div>
}

def loop2(array) {
  <div>
    array.forEach((item) => {
      = item
    })
  </div>
}

def Test(attributes) {
  <span>attributes.value</span>
}

def loop3(array) {
  <div>array.map((item) => <Test value=item />)</div>
}

def attributeWithDash(array) {
  <div data-id='1'></div>
}

test('virtual node', () => {
  test = render('hello')
  expect(test.children[0].text).toBe('hello')
})

test('test conditional virtual node', () => {
  condition = testConditions()
  expect(condition.children[0].text).toBe(2)
})

test('test loop, forEach equivalency', () => {
  r1 = loop1([1, 2, 3])
  r2 = loop2([1, 2, 3])
  r3 = loop3([1, 2, 3])
  expect(r1.children[0].text).toBe(1)
  expect(r2.children[0].text).toBe(1)
  expect(r1.children[2].text).toBe(3)
  expect(r2.children[2].text).toBe(3)
  expect(r3.children[2].children[0].text).toBe(3)
})

test('function inside virtual node', () => {
  test = level1()
  expect(test.children[0].children[0].text).toBe(1)
  expect(test.children[1].children[0].text).toBe(2)
  expect(test.children[2].children[0].text).toBe(3)
})

test('attribut with dash', () => {
  test = attributeWithDash()
  expect(test.data.attrs['data-id']).toBe('1')
})
