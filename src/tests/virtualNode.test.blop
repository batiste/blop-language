import { mount } from 'blop'

def render(text) {
  <h1>text</h1>
}

def level1() {
  i = 0
  <div>
    def add() {
      i := i + 1
      <span>i</span>
    }
    add()
    add()
    add()
  </div>
}

// should produce no warning
def testConditions() {
  if true {
    if false {
      <div>1</div>
    } elseif 1 {
      <div>2</div>
    } else {
      <div>3</div>
    }
  } elseif 1 {
    <div>4</div>
  } else {
    <div>5</div>
  }
}


def loop1(array) {
  <div>
    for item in array: array {
      = item
    }
  </div>
}

def loop2(array) {
  <div>
    array.forEach((item) => {
      = item
    })
  </div>
}

def Test(attributes) {
  <span>attributes.value</span>
}

def loop3(array) {
  <div>array.map((item) => <Test value=item />)</div>
}

lifeCycleContent = []
def TestLifecycle(attributes, _children, node) {
  node.mount(() => {
    lifeCycleContent.push(attributes.value)
  })
  <span>attributes.value</span>
}

def attributeWithDash(_array) {
  <div data-id='1'></div>
}

def ternaryExpressionInVirtualNode(c) {
  <div>if c > 10 => <p>1</p> else <p>2</p></div>
}

def ternaryExpressionInVirtualNode2(c) {
  <div>
    = if c > 10 => <p>1</p> else <p>2</p>
  </div>
}

test('ternary expression in virtual nodes', () => {
  vn = ternaryExpressionInVirtualNode(5)
  expect(vn.children[0].children[0].text).toBe(2)
  vn := ternaryExpressionInVirtualNode(15)
  expect(vn.children[0].children[0].text).toBe(1)
  vn := ternaryExpressionInVirtualNode2(5)
  expect(vn.children[0].children[0].text).toBe(2)
  vn := ternaryExpressionInVirtualNode2(15)
  expect(vn.children[0].children[0].text).toBe(1)
})

virtualNodeExprText = <div>'hello'</div>.children[0].text

test('virtual expression can be accessed', () => {
  expect(virtualNodeExprText).toBe('hello')
})

test('virtual node', () => {
  test = render('hello')
  expect(test.children[0].text).toBe('hello')
})

test('test conditional virtual node', () => {
  condition = testConditions()
  expect(condition.children[0].text).toBe(2)
})

test('test loop, forEach equivalency', () => {
  r1 = loop1([1, 2, 3])
  r2 = loop2([1, 2, 3])
  r3 = loop3([1, 2, 3])
  expect(r1.children[0].text).toBe(1)
  expect(r2.children[0].text).toBe(1)
  expect(r1.children[2].text).toBe(3)
  expect(r2.children[2].text).toBe(3)
  expect(r3.children[0].children[0].text).toBe(1)
  expect(r3.children[1].children[0].text).toBe(2)
  expect(r3.children[2].children[0].text).toBe(3)
})

test('function inside virtual node', () => {
  test = level1()
  expect(test.children[0].children[0].text).toBe(1)
  expect(test.children[1].children[0].text).toBe(2)
  expect(test.children[2].children[0].text).toBe(3)
})

test('attribut with dash', () => {
  test = attributeWithDash()
  expect(test.data.attrs['data-id']).toBe('1')
})

lifeCycleCalled = 0
def TestLifecycle2(_attributes, _children, node) {
  node.mount(() => {
    lifeCycleCalled := lifeCycleCalled + 1
  })
  node.mount(() => {
    lifeCycleCalled := lifeCycleCalled + 2
  })
  <span>1</span>
}

def loop4(array) {
  <div>array.map((item) => <TestLifecycle value=item />)</div>
}

def instanciateComponent() {
  <div>
    <TestLifecycle2></TestLifecycle2>
    <TestLifecycle2></TestLifecycle2>
    = loop4([1, 2, 3])
  </div>
}

def emptyResponse(empty) {
  if empty {
    return
  } else {
    <div>'not empty'</div>
  }
}

def testEmpty(empty) {
  <div>
    = emptyResponse(empty)
  </div>
}

test('function can return empty virtual node', () => {
  test = testEmpty(true)
  expect(test.children[0]).toBe(undefined)
  test := testEmpty(false)
  expect(test.children[0].children[0].text).toBe('not empty')
})

// this test doesn't run porperly on jenkins...
// test('test Component lifecycle', async (done) => {
//   jest.useFakeTimers()
//   { refresh, init } = mount(document.body, instanciateComponent)
//   _vnode = init()
//   jest.runAllTimers()
//   expect(lifeCycleCalled).toBe(6)
//   expect(lifeCycleContent).toEqual([1, 2, 3])
//   refresh((_time) => {
//     // weird...?
//     expect(lifeCycleCalled).toBe(12)
//   })
//   done()
// })