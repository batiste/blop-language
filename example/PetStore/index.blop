import { deletePets } from './services.blop'
import { getPets } from './services.blop'

import './style.scss' as classes

pageSize = 10

def pagination(petStore) {
  pets = petStore.pets
  pageIndex = petStore.pageIndex
  nbPage = Math.ceil(pets.length / pageSize)
  nextPage = (e) => {
    e.preventDefault()
    petStore.pageIndex = pageIndex + 1
  }
  previousPage = (e) => {
    e.preventDefault()
    petStore.pageIndex = pageIndex - 1
  }
  <p class="pagination">
    if pageIndex > 0 {
      <a href='#' class="btn btn-outline-secondary btn-sm "classes.previous"" on={ click: previousPage }>'< Previous page'</a>
      = ' '
    }
    = 'Page 'pageIndex + 1' on 'nbPage' '
    if pageIndex < pets.length {
      <a href='#' class="btn btn-outline-secondary btn-sm "classes.next"" on={ click: nextPage }>'Next page >'</a>
    }
  </p>
}

def PetStore(attributes, c, node) {
  { state } = attributes
  petStore = state.petStore
  pets = petStore.pets
  pageIndex = petStore.pageIndex
  start = pageIndex * pageSize
  page = petStore.pets.slice(start, (pageIndex + 1) * pageSize)
  nbPage = Math.ceil(pets.length / pageSize)

  node.mount(() => {
    console.log('mount PetStore')
    getPets(state)
  })

  deletePet = (index, pet) => (e) => {
    deletePets(pet)
    pets.splice(start + index, 1)
  }
  <div class=classes.petstore>
    <p>
      = 'Using the slow and buggy swagger pet API is a good test. Rendering 'pets.length' pets from '
      <a href='https://petstore.swagger.io/'>'petstore.swagger.io'</a>
    </p>
    if petStore.pets.length {
      = pagination(petStore)
      <table class="table">
        for key, pet in page: array {
          // the key can help with the patching speed
          <tr key>
            <td>
              = pet.name
            </td>
            <td>
              if pet.photoUrls {
                for src in pet.photoUrls {
                  if src.startsWith('http') {
                    <img src style={ width: '100px', height: '100px' } />
                  }
                }
              }
            </td>
            <td>
              <button class="btn btn-outline-danger btn-sm" on={ click: deletePet(key, pet) }>'Delete'</button>
            </td>
          </tr>
        }
      </table>
      = pagination(petStore)
    } else {
      <div class="spinner-border text-primary" role="status">
        <span class="sr-only">'Loading...'</span>
      </div>
    }
  </div>
}
