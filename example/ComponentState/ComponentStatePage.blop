
Counter = (attributes, children, node) => {
  // copying the React weird hook interface
  { value as counter, setState } = node.useState('counter', 0)
  increase = () => setState(counter + 1)
  decrease = () => setState(counter - 1)
  <div>
    <h4>attributes.name</h4>
    <label>
      <button class="btn btn-success" on={ click: increase }>'increase'</button>
      <button class="btn btn-danger" on={ click: decrease }>'decrease'</button>
      <b style={ 'font-size': '20px' }>' 'counter' '</b>
    </label>
    // = children // warning: children will not be re-rendered with setState
  </div>
}

ContextConsumer = (attributes, children, node) => {
  { value } = node.useContext('specialNumber')
  <p>value</p>
}

Intermediary = () => <ContextConsumer />
Interceptor = (attributes, children, node) => {
  node.useContext('specialNumber', 'specialNumber intercepted')
  <ContextConsumer />
}

CounterPage = (attributes, children, node) => {
  { setContext } = node.useContext('specialNumber', Math.random())
  changeValue = () => setContext(Math.random())
  <div>
    <h3>'useState'</h3>
    <p>
      = 'An example on how you can have state stored inside a component.
      Setting a state in a component will re-render this component
      Reloading the page will reset the state.'
    </p>
    <Counter name='Counter 1' />
    <Counter name='Counter 2' />

    <h3>'useContext'</h3>
    <p>
      = 'useContext allow you to pass values down the tree 
      while still being segregated hierarchically.
      Changing context in a parent will automatically
      trigger re-render in the listening children.'
    </p>
    <Intermediary />
    <Interceptor />
    <button on={ click: changeValue }>'Change value of the context'</button>
  </div>
}