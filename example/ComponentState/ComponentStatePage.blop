import { Component } from 'blop'


Counter = (attributes, _children, node) => {
  // copying the React weird hook interface
  { value as counter, setState } = node.useState('counter', 0)
  increase = () => setState(counter + 1)
  decrease = () => setState(counter - 1)
  <div>
    <h4>attributes.name</h4>
    <label>
      <button class="btn btn-success" on={ click: increase }>'increase'</button>
      <button class="btn btn-danger" on={ click: decrease }>'decrease'</button>
      <b style={ 'font-size': '20px' }>' 'counter' '</b>
    </label>
    // = children // warning: children will not be re-rendered with setState
  </div>
}

ContextConsumer = (_attributes, _children, node) => {
  { value } = node.useContext('specialNumber')
  <p>value</p>
}

Intermediary = () => <ContextConsumer />
Interceptor = (_attributes, _children, node) => {
  node.useContext('specialNumber', 'specialNumber intercepted')
  <ContextConsumer />
}

def renderClickCounter(value) {
  <p>value</p>
}

ClickCounter = (_attributes, _children, node) => {
  { value as counter, setState, getState } = node.useState('counter', 0)
  increase = () => {
    // need to use getState here as counter value
    // gets captured in increase and never changes
    setState(getState() + 1)
  }
  node.mount((_vnode) => {
    console.log('mount ClickCounter')
    document.addEventListener('click', increase)
  })
  node.unmount((_vnode) => {
    document.removeEventListener('click', increase)
    console.log('unmount ClickCounter')
  })
  return renderClickCounter(counter)
}

def Window() {
  // a window object usable in SSR
  if typeof window == 'undefined' {
    return { innerWidth: 960 }
  }
  return window
}


def useWindowWidth(node) {
  w = Window()
  { value as width, setState as setWidth } = node.useState('width', w.innerWidth)
  handleResize = () => setWidth(w.innerWidth)
  node.mount(() => {
    console.log('mount useWindowWidth')
    window.addEventListener('resize', handleResize)
  })
  node.unmount((_vnode) => {
    console.log('unmount useWindowWidth')
    window.removeEventListener('resize', handleResize)
  })
  return width
}

Animation = (attributes, children, node) => {
  w = Window()
  { value as position, setState as setPos } = node.useState('pos', { x: 0, y: 0 })
  runAnimation = true
  i = attributes.initial || 0
  animate = () => {
    i := i + 0.02
    position.x = (w.innerWidth / 2) + 120 * Math.cos(i) - 60
    position.y = (w.innerHeight / 2) + 120 * Math.sin(i) - 60
    setPos(position)
    runAnimation && window.requestAnimationFrame(animate)
  }
  node.mount(() => {
    console.log('mount Animation')
    window.requestAnimationFrame(animate)
  })
  node.unmount((_vnode) => {
    console.log('unmount Animation')
    runAnimation := false
  })
  <div style={ left: ''position.x'px', top: ''position.y'px', position: 'absolute' }>
    = children
  </div>
}

class ComponentWithClass extends Component {
  def render() {
    { text } = this.attributes
    <div>
      <p>'hello 'text''</p>
      <p>JSON.stringify(this.pos)</p>
    </div>
  }

  def mouseMove(e) {
    this.pos = { x: e.x, y: e.y }
    this.refresh()
  }

  def onMount() {
    this.mouseMoveHandler = (e) => this.mouseMove(e)
    document.addEventListener('mousemove', this.mouseMoveHandler)
  }

  def onUnmount() {
    document.removeEventListener('mousemove', this.mouseMoveHandler)
  }
}

CounterPage = (_attributes, _children, node) => {
  width = useWindowWidth(node)
  width2 = useWindowWidth(node) + 10
  { setContext } = node.useContext('specialNumber', Math.random())
  changeValue = () => setContext(Math.random())
  <div>
    <h3>'ClassComponent'</h3>
    <p>'Here is an example of a Class based Component'</p>
    <ComponentWithClass text='world' />
    <h3>'useState'</h3>
    <p>'An example on how you can have state stored inside a component.
      Setting a state in a component will re-render this component
      Reloading the page will reset the state.'</p>
    <Animation>'Animation 0'</Animation>
    <Animation initial=1>'Animation 1'</Animation>
    <Animation initial=2>'Animation 2'</Animation>
    <Animation initial=3>'Animation 3'</Animation>
    <Animation initial=4>'Animation 4'</Animation>
    <Animation initial=5>'Animation 5'</Animation>
    <Counter name='Counter 1' />
    <Counter name='Counter 2' />

    <h3>'useContext'</h3>
    <p>'useContext allow you to pass values down the tree 
      while still being segregated hierarchically.
      Changing context in a parent will automatically
      trigger re-render in the listening children.'</p>
    <Intermediary />
    <Interceptor />
    <button on={ click: changeValue }>'Change value of the context'</button>
    <h3>'lifecycle'</h3>
    <p>'lifecycle gives you access to the snabbdom lifecycle hooks directly from a component.'</p>
    <ClickCounter />
    <h3>'Famous React hook useWindowWidth'</h3>
    <p>'useWindowWidth:'width''</p>
    <p>'useWindowWidth+10:'width2''</p>
  </div>
}

