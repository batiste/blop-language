
def escapeRegExp(str) {
  return str.replace(/[.*+?^${}()|[\]\\\/]/g, '\\$&')
}

def createRegExp(str) {
  escapedStr = escapeRegExp(str)
  reg = /\:(\w+)/
  names = []
  escapedStr := escapedStr.replace(/\:(\w+)/g, (a, b) => {
    names.push(b)
    return '([\\w\\.\\-\\_]+)'
  })
  return { regexp: `^`escapedStr``, names }
}

mockWindow = {
  addEventListener: () => {},
  location: { pathname: '/' },
  history: { pushState: () => {} }
}

class Router {
  def constructor(initial, state, global=mockWindow) {
    this.routes = []
    this.state = state
    this.state.connectRouter(this)
    this.global = global
    global.addEventListener('popstate', (e) => {
      if e.state == null {
        initial && initial()
      } else {
        matchedRoute = this.routes.find(
          (route) => route.path == e.state.path)
        matchedRoute && matchedRoute.handler(e.state.params, this.state)
      }
    })
  }
  def init() {
    this.go(this.global.location.pathname, true)
  }
  def add(route) {
    { regexp, names } = createRegExp(route.path)
    route.reg = new RegExp(regexp)
    route.params = names
    this.routes.push(route)
  }
  def match(path: string) {
    m = null
    params = {}
    matchedRoute = this.routes.find((route) => {
      m := path.match(route.reg)
      if m {
        if route.params {
          for index, value in route.params: array {
            params[value] = m[1 + index]
          }
        }
        return true
      }
    })
    if matchedRoute {
      return { route: matchedRoute, params: params }
    }
  }
  async def go(path: string, push=true) {
    m = this.match(path)
    if !m {
      console.log('No route for path 'path'')
      return
    }
    if push {
      this.global.history.pushState({
          name: m.route.name,
          path: m.route.path,
          params: m.params
        },
        m.route.name, path)
    }
    if m.route.handler {
      await m.route.handler(m.params, this.state)
    }
  }
}
