import { mount } from 'blop'
import { createState } from './state.blop'
import { createRouter } from './routing.blop'
import { Index } from './index.blop'

proxiedState = createState(window.INITIAL_STATE)
router = createRouter(proxiedState, window)

render = () => {
  proxiedState.$.flush()
  tree = Index(proxiedState)
  console.log('Client renderer executed')
  return tree
}

// boot up the app on the client
{ refresh, init } = mount(document.getElementById('app'), render)
init()

refreshCount = 0
maxRefreshCount = 10

// called after Blop has finished rendering
def refreshCallback(time, path) {
  if time > 50 => console.log(`Slow rendering time `time`ms triggered by `path``)
  if (proxiedState.hasChanged()) {
    refreshCount := refreshCount + 1
    if (refreshCount >= maxRefreshCount) {
      modifications = proxiedState.$.modifications[0]
      console.warn('It looks like the path "'modifications.path'" is being modified inside the renderer of on of your components. 
Blop refresh runtime has stopped in order to avoid an infinite loop. Refresh has been executed 'maxRefreshCount' times.')
      refreshCount := 0
      return
    }
    refresh((t) => {
      refreshCallback(t, proxiedState.$.modifications[0])
    })
  } else {
    refreshCount := 0
  }
}

proxiedState.$.listen((path) => {
  refresh((time) => {
    refreshCallback(time, path)
  })
})

if (module && module.hot) {
  module.hot.accept((e) => {
    console.warn(e)
  })
}