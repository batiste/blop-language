import 'express'
import { Index } from './index.blop'
import { createState } from './state.blop'
import { createRouter } from './routing.blop'
import 'webpack'
import 'webpack-dev-middleware' as middleware
import 'webpack-hot-middleware' as hotMiddleware
import 'snabbdom-to-html' as toHTML
import 'path' as nodepath
import '../webpack.client.js' as webpackClientConf
import 'body-parser' as bodyParser

app = express()
app.use(bodyParser.json())

// we only rebuild the client config
compiler = webpack(webpackClientConf)
app.use(hotMiddleware(compiler))

instance = middleware(compiler, {
  noInfo: true,
  publicPath: '/'
})

/* a singleton in memory, should be in a DB
   and for each user */
savedState = null

render = async (path: string) => {
  state = createState(savedState)
  router = createRouter(state)
  await router.go(path)
  tree = Index(state)
  console.log('Server render executed for 'path'')
  return tree
}

app.use(instance)

app.get('/blop/favicon.ico', (_req, res) => {
  res.sendFile(nodepath.resolve('./img/blop.png'))
})

app.post('/api/saveState', (req, res) => {
  savedState := req.body
  res.send('Application state properly saved on server')
})

def escapeJSON(json) {
  return JSON.stringify(json).replace(/</gm, '&lt;')
}

app.use(async (req, res) => {
  html = toHTML(await render(req.path))
  state = createState(savedState)
  res.send(`
    <html>
      <head>
        <title>Blop language example</title>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
      </head>
      <body>
        <div id="app">
          `html`
        </div>
      </body>
      <script>window.INITIAL_STATE = `escapeJSON(savedState || state)`</script>
      <script src="/client.js"></script>
      <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
      <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
    </html>
  `)
})

def serverReady() {
  GREEN = '\x1b[32m'
  NC = '\x1B[0m'
  console.log(''GREEN'[server]'NC' Running on http://localhost:3000')
}

app.listen(3000, serverReady)
instance.waitUntilValid(serverReady)
