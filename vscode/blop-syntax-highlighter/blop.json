{  
    "fileTypes":[  
      "blop"
    ],
    "name":"blop",
    "patterns":[
      {  
        "captures":{  
          "1":{  
            "name":"keyword.other.blop"
          },
          "2":{  
            "name":"parens"
          }
        },
        "match":"(def)(?:\\()",
        "name":"def.blop"
      },
      {  
        "match":"^(def |class |async def )([a-zA-Z_$][a-zA-Z_0-9_$]*)",
        "captures": {
          "1": {"name":"keyword.other.blop"},
          "2": {"name":"support.type.object.module.blop"}
        },
        "name":"export.blop"
      },
      {  
        "match":" (in) ([a-zA-Z_$][a-zA-Z_0-9_$]*)",
        "captures": {
          "1": {"name":"keyword.other.blop"},
          "2": {"name":"name.blop"}
        },
        "name":"loop.blop"
      },
      {  
        "match":"''",
        "name":"string.cokescript"
      },
      {  
        "match":"\"\"",
        "name":"string.cokescript"
      },
      {  
        "match":"``",
        "name":"string.cokescript"
      },
      {  
        "begin":"\\\"",
        "end":"(\\\\.|[^\\\"])*\"",
        "name":"string.blop"
      },
      {  
        "begin":"\\'",
        "end":"(\\\\.|[^\\'])*'",
        "name":"string.blop"
      },
      {  
        "begin":"\\`",
        "end":"(\\\\.|[^\\`])*`",
        "name":"string.blop"
      },
      {  
        "begin":"\"",
        "end":"\"",
        "name":"string.blop"
      },
      {  
        "begin":"\\'",
        "end":"\\'",
        "name":"string.blop"
      },
      {  
        "begin":"\\`",
        "end":"\\`",
        "name":"string.blop"
      },
      {  
        "match":"\\<[a-zA-Z][a-zA-Z_0-9]*[ |\\n]",
        "name":"keyword.html.compare.blop"
      },
      {  
        "match":"\\<[a-zA-Z][a-zA-Z_0-9]*\\>",
        "name":"keyword.html.compare.blop"
      },
      {  
        "match":"\\<\\/[a-zA-Z][a-zA-Z_0-9]*\\>",
        "name":"keyword.html.compare.blop"
      },
      {  
        "match":"\\<[a-zA-Z][a-zA-Z_0-9]*\\/>",
        "name":"keyword.html.compare.blop"
      },
      {  
        "match":"\\/>",
        "name":"keyword.html.compare.blop"
      },
      {  
        "match":"\\=\\=|\\!\\=|\\<\\=|\\:\\=|\\>\\=|\\=|\\&\\&?|\\<|\\>|\\+|\\-|\\|\\|?|\\=",
        "name":"keyword.other.compare.blop"
      },
      {  
        "match":"^([a-zA-Z_$][a-zA-Z_0-9_$]*) \\= ",
        "captures": {"1": {"name":"support.type.object.module.blop"}}
      },
      {  
        "match":"(\\.[a-zA-Z_$][a-zA-Z_0-9_$]*) \\= ",
        "captures": {"1": {"name":"variable.assignment.blop"}}
      },
      {  
        "match":" ([a-zA-Z_$][a-zA-Z_0-9_$]*)\\=",
        "captures": {"1": {"name":"variable.parameter"}}
      },
      {
        "match":"def |if |else|elseif |for |delete |new |extends |in |as |class |try|catch|throw |select |return|undefined|false|debugger|true|while |not |null|pass|async |await |import |from |this|typeof |instanceof |\\.\\.\\.",
        "name":"keyword.statement.blop"
      },
      {
        "match":"^[ ]*break\n|continue\n",
        "name":"keyword.statement.blop"
      },
      {
        "match":"\\: ([a-zA-Z_$][a-zA-Z_0-9_$]*)",
        "name":"annotation.blop",
        "captures": {
          "1": {"name":"keyword.annotation.blop"}
        }
      },
      {
        "captures":{
          "1":{  
            "name":"support.function.misc.blop"
          },
          "2":{  
            "name":"parens"
          }
        },
        "match":"([a-zA-Z_$][a-zA-Z_0-9_$]*)(?:\\()",
        "name":"func.call.blop"
      },
      {
        "match":"[,|\\s|{][a-zA-Z_$][a-zA-Z_0-9_$]*\\:",
        "name":"meta.object-literal.key.blop"
      },
      {  
        "match":"[a-zA-Z_$][a-zA-Z_0-9_$]*",
        "name":"name.blop"
      },
      {  
        "match":"\\.|\\,|\\:",
        "name":"punctuation.definition.string.blop"
      },
      {  
        "match":"[0-9]+\\.?[0-9]*",
        "name":"constant.numeric.decimal.blop"
      },
      {  
        "match":"\\/\\/[^\\n]*",
        "name":"comment.blop"
      },
      {
        "name": "comment.block.blop",
        "begin": "/\\*",
        "beginCaptures": {
          "0": {
            "name": "definition.comment.blop"
          }
        },
        "end": "\\*/",
        "endCaptures": {
          "0": {
            "name": "definition.comment.blop"
          }
        }
      },
      {  
        "match":"\\/(\\\\.|[^\\/])*/",
        "name":"string.blop"
      }
    ],
    "scopeName":"source.blop",
    "uuid":"80bb5c88-4a96-45ed-af77-18a15627612f"
  }